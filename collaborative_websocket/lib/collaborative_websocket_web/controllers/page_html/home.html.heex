<style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    .user-section { border: 1px solid #ccc; margin: 10px 0; padding: 15px; border-radius: 8px; }
    .controls { margin: 10px 0; }
    button { 
        margin: 5px; 
        padding: 8px 12px; 
        cursor: pointer;
        border: 1px solid #ddd;
        background: #f9f9f9;
        border-radius: 4px;
    }
    button:hover { background: #e9e9e9; }
    button:disabled { 
        opacity: 0.6; 
        cursor: not-allowed; 
        background: #f5f5f5;
    }
    .log { 
        background: #f5f5f5; 
        padding: 10px; 
        height: 200px; 
        overflow-y: auto; 
        font-family: monospace; 
        font-size: 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        white-space: pre-wrap;
    }
    .status { 
        font-weight: bold; 
        margin: 5px 0; 
        padding: 4px 8px;
        border-radius: 4px;
    }
    .status.connected { background: #d4edda; color: #155724; }
    .status.disconnected { background: #f8d7da; color: #721c24; }
</style>

<div id="app">
    <h1>Phoenix Channels WebSocket Collaboration Test - Late Joiner Problem Demo</h1>
    
    <div class="user-section">
        <h2>User A</h2>
        <div id="statusA" class="status disconnected">Disconnected</div>
        <div class="controls">
            <button onclick="connectUser('A')" id="connectA">Connect User A</button>
            <button onclick="disconnectUser('A')" id="disconnectA" disabled>Disconnect</button>
            <button onclick="sendDrawEvent('A')" id="drawA" disabled>Send Draw Event</button>
            <button onclick="sendCircleEvent('A')" id="circleA" disabled>Send Circle Event</button>
        </div>
        <div id="logA" class="log"></div>
    </div>

    <div class="user-section">
        <h2>User B (Late Joiner)</h2>
        <div id="statusB" class="status disconnected">Disconnected</div>
        <div class="controls">
            <button onclick="connectUser('B')" id="connectB">Connect User B</button>
            <button onclick="disconnectUser('B')" id="disconnectB" disabled>Disconnect</button>
            <button onclick="sendDrawEvent('B')" id="drawB" disabled>Send Draw Event</button>
            <button onclick="sendCircleEvent('B')" id="circleB" disabled>Send Circle Event</button>
        </div>
        <div id="logB" class="log"></div>
    </div>

    <div class="user-section">
        <h2>Test Scenarios</h2>
        <button onclick="testLateJoinerProblem()" id="testBtn">Test Late Joiner Problem</button>
        <button onclick="clearLogs()">Clear Logs</button>
    </div>
</div>

<script>
    let socketA = null;
    let socketB = null;
    let channelA = null;
    let channelB = null;
    let testInProgress = false;

    function log(user, message) {
        const logElement = document.getElementById(`log${user}`);
        const timestamp = new Date().toLocaleTimeString();
        logElement.textContent += `[${timestamp}] ${message}\n`;
        logElement.scrollTop = logElement.scrollHeight;
    }

    function updateStatus(user, connected) {
        const statusElement = document.getElementById(`status${user}`);
        statusElement.textContent = connected ? 'Connected' : 'Disconnected';
        statusElement.className = `status ${connected ? 'connected' : 'disconnected'}`;
        
        // Update button states
        document.getElementById(`connect${user}`).disabled = connected;
        document.getElementById(`disconnect${user}`).disabled = !connected;
        document.getElementById(`draw${user}`).disabled = !connected;
        document.getElementById(`circle${user}`).disabled = !connected;
    }

    function connectUser(user) {
        const userId = user === 'A' ? 'userA' : 'userB';
        const socket = new Phoenix.Socket('/socket');
        
        socket.connect();
        
        const channel = socket.channel('session:room', {
            user_id: userId,
            last_known_version: null
        });
        
        channel.join()
            .receive('ok', resp => {
                log(user, 'Successfully joined session');
                updateStatus(user, true);
            })
            .receive('error', resp => {
                log(user, `Failed to join: ${JSON.stringify(resp)}`);
            });
        
        // Handle incoming messages
        channel.on('sync_start', payload => {
            log(user, `Sync started: ${payload.sync_id}`);
        });
        
        channel.on('snapshot', payload => {
            log(user, `Received snapshot with ${payload.events.length} events`);
            payload.events.forEach(event => {
                log(user, `  Event: ${JSON.stringify(event)}`);
            });
        });
        
        channel.on('sync_complete', payload => {
            log(user, `Sync complete - version: ${payload.current_version}`);
        });
        
        channel.on('event', payload => {
            log(user, `Received event: ${JSON.stringify(payload.event)}`);
        });
        
        channel.on('user_joined', payload => {
            log(user, `User joined: ${payload.user_id}`);
        });
        
        channel.on('user_left', payload => {
            log(user, `User left: ${payload.user_id}`);
        });
        
        channel.onClose(() => {
            log(user, 'Connection closed');
            updateStatus(user, false);
        });
        
        channel.onError(() => {
            log(user, 'Connection error');
            updateStatus(user, false);
        });
        
        if (user === 'A') {
            socketA = socket;
            channelA = channel;
        } else {
            socketB = socket;
            channelB = channel;
        }
    }

    function disconnectUser(user) {
        if (user === 'A' && channelA) {
            channelA.leave();
            socketA.disconnect();
            socketA = null;
            channelA = null;
        } else if (user === 'B' && channelB) {
            channelB.leave();
            socketB.disconnect();
            socketB = null;
            channelB = null;
        }
    }

    function sendDrawEvent(user) {
        const channel = user === 'A' ? channelA : channelB;
        if (!channel) {
            log(user, 'Not connected!');
            return;
        }
        
        const event = {
            x1: Math.random() * 100,
            y1: Math.random() * 100,
            x2: Math.random() * 100,
            y2: Math.random() * 100,
            color: user === 'A' ? 'red' : 'blue'
        };
        
        channel.push('draw', event);
        log(user, `Sent draw event: ${JSON.stringify(event)}`);
    }

    function sendCircleEvent(user) {
        const channel = user === 'A' ? channelA : channelB;
        if (!channel) {
            log(user, 'Not connected!');
            return;
        }
        
        const event = {
            cx: Math.random() * 100,
            cy: Math.random() * 100,
            radius: Math.random() * 20 + 5,
            color: user === 'A' ? 'red' : 'blue'
        };
        
        channel.push('circle', event);
        log(user, `Sent circle event: ${JSON.stringify(event)}`);
    }

    async function testLateJoinerProblem() {
        if (testInProgress) return;
        
        testInProgress = true;
        document.getElementById('testBtn').disabled = true;
        document.getElementById('testBtn').textContent = 'Running Test...';
        
        clearLogs();
        
        log('A', '=== STARTING LATE JOINER TEST ===');
        log('B', '=== STARTING LATE JOINER TEST ===');
        
        try {
            // Step 1: Connect User A
            log('A', 'Step 1: Connecting User A...');
            connectUser('A');
            await sleep(1000);
            
            // Step 2: User A sends some events
            log('A', 'Step 2: User A sends events...');
            sendDrawEvent('A');
            await sleep(200);
            sendCircleEvent('A');
            await sleep(200);
            sendDrawEvent('A');
            
            // Step 3: User B connects (late joiner)
            log('B', 'Step 3: User B connects as late joiner...');
            connectUser('B');
            
            // Step 4: User A continues sending events during B's connection
            log('A', 'Step 4: User A continues sending events during B connection...');
            setTimeout(() => sendDrawEvent('A'), 50);
            setTimeout(() => sendCircleEvent('A'), 150);
            
            await sleep(2000);
            
            // Step 5: Both users send events
            log('A', 'Step 5: Both users now active...');
            log('B', 'Step 5: Both users now active...');
            sendDrawEvent('A');
            sendCircleEvent('B');
        } finally {
            testInProgress = false;
            document.getElementById('testBtn').disabled = false;
            document.getElementById('testBtn').textContent = 'Test Late Joiner Problem';
        }
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function clearLogs() {
        document.getElementById('logA').textContent = '';
        document.getElementById('logB').textContent = '';
    }
</script>
